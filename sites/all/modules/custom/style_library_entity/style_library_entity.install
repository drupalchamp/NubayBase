<?php
/**
 * @file Style Library Entity install, schema, and uninstall
 */


/**
 * Implements hook_install().
 */
function style_library_entity_install() {

}

/**
 * Implements of hook_uninstall().
 */
function style_library_entity_uninstall() {
  variable_del('style_library_entity_settings');
  // delete log view
  if ($view = views_get_view('style_library_entity_overview')) {
    views_delete_view($view);
  }

  // Delete all fields of all bundles on module uninstall
  $params = [
    'entity_type' => 'style_library_entity',
  ];
  foreach (field_read_instances($params, ['include_inactive' => TRUE]) as $instance) {
    $field_name = $instance['field_name'];
    field_delete_instance($instance, FALSE);
    // Now check to see if there are any other instances of the field left.
    $field = field_info_field($field_name);
    if (count($field['bundles']) == 0) {
      field_delete_field($field_name);
    }
  }
  // Make sure fields are removed from db
  // only necessary because standard Drupal cron is not currently running
  field_sync_field_status();
  // Do a pass of purging on deleted Field API data, if any exists.
  $limit = variable_get('field_purge_batch_size', 10);
  field_purge_batch($limit);

  db_delete('field_config_instance')
    ->condition('entity_type', 'style_library_entity')
    ->execute();
}


/**
 * Implements hook_schema().
 */
function style_library_entity_schema() {
  $schema = array();
  $schema['style_library_entity'] = array(
    'description' => 'The base table for Style Library entities.',
    'fields' => array(
      'slid' => array(
        'description' => 'Drupal ID for a Style Library Record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Bundle type',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Style library name',
        'type' => 'varchar',
        'length' => '128',
      ),
      'enabled' => array(
        'description' => 'Enabled',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'Created date',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'updated' => array(
        'description' => 'Updated date',
        'type' => 'int',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('slid'),

    'indexes' => array(
      'enabled' => array('enabled'),
    ),
  );

  $schema['style_library_entity_type'] = array(
    'description' => 'Stores information about defined Style Library Entity types.',
    'fields' => array(
        'id' => array(
          'type' => 'serial',
          'not null' => TRUE,
          'description' => 'Entity type identifier.',
        ),
        'type' => array(
          'description' => 'The machine-readable name of this entity type.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
        ),
        'label' => array(
          'description' => 'The human-readable name of entity type.',
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'weight' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
          'size' => 'tiny',
          'description' => 'The weight of this type in relation to others.',
        ),
        'data' => array(
          'type' => 'text',
          'not null' => FALSE,
          'size' => 'big',
          'serialize' => TRUE,
          'description' => 'A serialized array of additional data related to this entity type.',
        ),
      ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Remove Extension Type column from style_library_entity table
 */
function style_library_entity_update_7001(&$sandbox) {
  if (db_field_exists('style_library_entity', 'extension_type')) {
    db_drop_field('style_library_entity', 'extension_type');
  }
}
