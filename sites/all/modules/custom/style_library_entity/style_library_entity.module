<?php

/**
 * @file
 * Module Style Library Entity
 */

/**
 * Implements hook_permission().
 */
function style_library_entity_permission() {
  $permissions = [
    'administer style library entity' => [
      'title' => t('Administer Style Library Entity module'),
      'description' => t('Administer Style Library Entity module'),
    ],
    'view style library entity records' => [
      'title' => t('View Style Library Entity Records'),
      'description' => t('View all Style Library Entity Records'),
    ],
    'create style library entity records' => [
      'title' => t('Create Style Library Entity Records'),
      'description' => t('Create Style Library Entity Records'),
    ],
    'edit style library entity records' => [
      'title' => t('Edit Style Library Entity Records'),
      'description' => t('Edit all Style Library Entity Records'),
    ],
    'delete style library entity records' => [
      'title' => t('Delete Style Library Entity Records'),
      'description' => t('Delete all Style Library Entity Records'),
    ],
  ];
  return $permissions;
}

function style_library_entity_menu() {
  $items = [];
  $items['admin/appearance/style-library-entity/settings'] = [
    'title'            => 'Style Library Settings',
    'description'      => 'Modify style library settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => ['style_library_entity_settings_form'],
    'access callback'  => 'user_access',
    'access arguments' => ['administer style library entity'],
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'config.forms.inc',
    'file path'        => drupal_get_path('module', 'style_library_entity') . '/forms',
    'weight'           => -10,
  ];
  return $items;
}


/**
 * Implement hook_entity_info().
 */
function style_library_entity_entity_info() {
  $return['style_library_entity'] = array(
    'label' => t('Style Library Entity'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'StyleLibraryEntity',
    'controller class' => 'StyleLibraryEntityController',
    'metadata controller class' => 'StyleLibraryEntityMetadataController',
    'views controller class' => 'StyleLibraryEntityDefaultViewsController',
    'extra fields controller class' => 'StyleLibraryEntityExtraFieldsController',
    'base table' => 'style_library_entity',
    'fieldable' => TRUE,
    'static cache' => TRUE,
    'field cache' => TRUE,
    'entity keys' => array(
      'id' => 'slid',
      'label' => 'name',
    ),
    'bundles' => array(
      'style_library_entity' => array(
        'label' => t('Style Library Entity'),
        'admin' => array(
          'path' => 'admin/appearance/style-library-entity/types/manage/style_library_entity',
          'access arguments' => array('administer style library entity'),
        ),
      ),
    ),
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'style_library_entity_create',
    'access callback' => 'style_library_entity_entity_access',
    'module' => 'style_library_entity',
    'admin ui' => array(
      'path' => 'admin/appearance/style-library-entity',
      'file' => 'includes/StyleLibraryEntity.php',
      'controller class' => 'StyleLibraryEntityUIController',
      'menu wildcard' => '%entity',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $return;
}


/**
 *  Implements hook_form_FORMID_alter().
 *
 *  Adds a submit handler when saving the manage display forms
 */
function style_library_entity_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  if($form['#entity_type'] == 'style_library_entity') {
    $submits = array();
    $submits[] = '_style_library_entity_manage_display_submit';
    foreach($form['#submit'] as $submit_callback){
      $submits[] = $submit_callback;
    }
    $form['#submit'] = $submits;
  }
}

/**
 * Submit handler for making sure our display suited entity properties are visible
 */
function _style_library_entity_manage_display_submit(&$form, &$form_state) {
  if($form_state['values']['additional_settings']['layout']!=''){
    $entity_type = $form['#entity_type'];
    $bundle = $form['#bundle'];
    $bundle_settings = field_bundle_settings($entity_type, $bundle);

    foreach($bundle_settings['extra_fields']['display'] as $key => $field) {
      $form_state['values']['fields'][$key]['type'] = 'visible';
    }
  }
}

/**
 * Implements hook_ds_field_settings_form().
 */
function style_library_entity_ds_field_settings_form($field) {
  return ds_ds_field_settings_form($field);
}

/**
 * Implements hook_ds_field_format_summary().
 */
function style_library_entity_ds_field_format_summary($field) {
  return ds_ds_field_format_summary($field);
}


/**
 * Auto wildcard loader to load the expiration record entity if available.
 *
 */
function style_library_entity_loader_load($id) {
  $entity = entity_load_single('style_library_entity', $id);
  if($entity) {
    return $entity;
  }
  else return $id;
}

/**
 * Determines whether the given user has access to a style library entity record.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $entity
 *   Optionally a entity or a entity type to check access for. If nothing is
 *   given, access for all entities is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function style_library_entity_entity_access($op = 'admin', $entity = NULL, $account = NULL) {

  if (is_null($account)) {
    global $user;
    $account = user_load($user->uid);
  }
  else {
    if (is_int($account)) {
      $account = user_load($account);
    }
  }

  switch($op) {
    case 'view':
      return user_access('view style library entity records', $account);
    case 'update':
      return user_access('edit style library entity records', $account);
    case 'create':
      return user_access('create style library entity records', $account);
    case 'delete':
      return user_access('delete style library entity records', $account);
    default :
      return user_access('administer style library entity', $account);
  }
}

/**
 * Fetch a style library entity object.
 *
 * @param $id
 *   Integer specifying the entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $entity object or FALSE if it cannot be loaded.
 *
 * @see load_multiple()
 */
function style_library_entity_load($id, $reset = FALSE) {
  $entities = style_library_entity_load_multiple(array($id), array(), $reset);
  return reset($entities);
}

/**
 * Load multiple style library entity based on certain conditions.
 *
 * @param $ids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of entity objects, indexed by id.
 *
 * @see entity_load()
 */
function style_library_entity_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('style_library_entity', $ids, $conditions, $reset);
}

/**
 * Delete style library entity
 *
 * @param \StyleLibraryEntity $entity
 */
function style_library_entity_delete(StyleLibraryEntity $entity) {
  $entity->delete();
}

/**
 * Delete multiple style library entitys.
 *
 * @param $ids
 *   An array of entity IDs.
 */
function style_library_entity_delete_multiple(array $ids) {
  entity_get_controller('style_library_entity')->delete($ids);
}

/**
 * Create a style library entity object.
 */
function style_library_entity_create($values = array()) {
  return entity_get_controller('style_library_entity')->create($values);
}

/**
 * Saves a style library entity to the database.
 *
 * @param $entity
 *   The entity object.
 */
function style_library_entity_save(StyleLibraryEntity $entity) {
  return $entity->save();
}

/**
 * Menu title callback for showing individual entities
 */
function style_library_entity_page_title(StyleLibraryEntity $entity){
  return $entity->slid;
}

/**
 * Implements hook_views_api().
 */
function style_library_entity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'style_library_entity') . '/views',
  );
}
